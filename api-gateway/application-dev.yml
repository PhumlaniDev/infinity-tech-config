server:
  port: 8085

spring:
  application:
    name: api-gateway
  config:
    activate:
      on-profile: dev
  main:
    web-application-type: reactive
  datasource:
    url: jdbc:postgresql://localhost:5432/gateway_db
    username: "{cipher}2dbb4f8fb118abdff5534ba5bc8c8ed8cc1435a333a2958811a3f9713215d1ee"
    password: "{cipher}2dbb4f8fb118abdff5534ba5bc8c8ed8cc1435a333a2958811a3f9713215d1ee"
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5       # Keep low to avoid exhausting local DB connections
      minimum-idle: 2            # Few idle connections are enough
      idle-timeout: 30000        # 30 sec before closing idle connections
      max-lifetime: 1800000      # 30 minutes
      connection-timeout: 10000  # 10 seconds max wait for a connection
      pool-name: DevHikariCP

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true

    flyway:
      enabled: true
      locations: classpath:db/migration

  cloud:
    gateway:
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: "http://localhost:3000"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeader: "*"
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes:
        - id: auth-service
          uri: lb://auth-service
          predicates:
            - Path=/api/v1/auth/**

        # ‚úÖ Public GETs
        - id: product-service-public
          uri: lb://product-service
          predicates:
            - Path=/api/v1/products/all
            - Path=/api/v1/products/*/price

        # üîê Secured write routes
        - id: product-service-secured
          uri: lb://product-service
          predicates:
            - Path=/api/v1/products/**

        # Cart service
        - id: cart-service
          uri: lb://cart-service
          predicates:
            - Path=/api/v1/cart/**

        # Order service
        - id: order-service
          uri: lb://order-service
          predicates:
            - Path=/api/v1/order/**

        # Notification service
        - id: notification-service
          uri: lb://notification-service
          predicates:
            - Path=/api/v1/notifications/**

        # Payment service
        - id: payment-service
          uri: lb://payment-service
          predicates:
            - Path=/api/v1/payments/**
            - Path=/api/v1/stripe/**
            - Method=POST
          filter:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenish-rate: 10
                redis-rate-limiter.burst-capacity: 20
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@ipKeyResolver}"
    config:
      uri: http://localhost:8888

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/mac-apps

keycloak:
  auth-server-url: http://localhost:8080
  realm: mac-apps
  resource: tech-hive-store
  principle-attribute: preferred_username
  credentials:
    secret: "{cipher}b95c0c56236b30fc32c8e1addeec3cc68295f0205ffc19bf798204e9d43d833e67ee3597c606fe95f1948f32d4cda9ce7931b008f41f2f5f8ddd3b2a12d32506"
  admin:
    username: "{cipher}1b1605dd29d70df25c643ed64a28779456c1453c2252432b3a77e77ae35935d0"
    password: "{cipher}9691f299e5d13785d56be58db20a811fbea1b1b8469c6d0b7dfb2040be6eac09"

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: always

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.cloud.gateway: DEBUG