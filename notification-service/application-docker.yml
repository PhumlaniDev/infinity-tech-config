server:
  port: 9500

spring:
  application:
    name: notification-service
  config:
    activate:
      on-profile: docker
  cloud:
    stream:
      defaultBinder: kafka
      bindings:
        # âœ… Consumer of order placed events
        orderPlaced-in-0:
          destination: order.placed.queue
          group: notification-order-group
        #          content-type: application/json
        #          consumer:
        #            exchange-type: fanout   # ðŸ‘ˆ MUST match producer
        #            autoBindDlq: true
        #            republishToDlq: true
        #            maxAttempts: 3
        #            backOffInitialInterval: 2000
        #            backOffMultiplier: 2.0

        # âž• Future: Consume payment completed event
        paymentCompleted-in-0:
          destination: payment.completed.queue
          group: notification-payment-group
  #          content-type: application/json
  #          consumer:
  #            autoBindDlq: true
  #            republishToDlq: true
  #            maxAttempts: 3
  #            backOffInitialInterval: 2000
  #            backOffMultiplier: 2.0
  datasource:
    url: jdbc:postgresql://postgres-notification:5432/notificationdb
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5       # Keep low to avoid exhausting local DB connections
      minimum-idle: 2            # Few idle connections are enough
      idle-timeout: 30000        # 30 sec before closing idle connections
      max-lifetime: 1800000      # 30 minutes
      connection-timeout: 10000  # 10 seconds max wait for a connection
      pool-name: DevHikariCP
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  sql:
    init:
      mode: always
      schema-locations: classpath:db/schema.sql
  flyway:
    enabled: true
    locations: classpath:/db/migration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://keycloak:8080/realms/ecommerce
          jwk-uri: http://keycloak:8080/realms/ecommerce/protocol/openid-connect/certs
  rabbitmq:
    host: rabbitmq
    port: 5672
    username: "{cipher}21ef876d345fc0f126fb77707df98e739755474e6d39a35bf01f3b9af2f15b7f"
    password: "{cipher}3a2d49f7665bd9715e6c718a5b3b48057049f0695f52bf4e32c18c33189c06ef"

#  mail:
#    host: live.smtp.mailtrap.io
#    port: 587
#    username: api
#    password: "{cipher}d186fe72ad82339e7a96f878230ac88e281c454aa40d547deadb793bcb5b39b0b3f3f8d2ab62571c916f63ce313e555329525f3150b74b812851674df3e0f490"
#    properties:
#      mail:
#        smtp:
#          auth: true
#          starttls:
#            enable: true

# Gmail configuration (uncomment if needed)
  mail:
    host: smtp.gmail.com
    port: 587
    username: "{cipher}2d53a4f5c04bfa61ad47c5ac020e7850e65b1fb46c61be8367cb89d3aec5878ae7d6176dfc9cb8faec5056e87cccb536"
    password: "{cipher}258e2db4ea54ae4b0d8cdf88414854ac7e8f88b1eff50920d12a5e92fa2fa032d3563b711eb391952bf87259429424f7"
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  cache:
    type: caffeine

  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML
    cache: false

keycloak:
  auth-server-url: http://keycloak:8080
  realm: ecommerce
  resource: notification-service
  principle-attribute: preferred_username
  credentials:
    secret: "{cipher}49e91fb763b85ee60d41255a140c37e759024eed116608690c159dc0fc4c4072f50edbb4906c6794c51be095a3d5f09000e7f36330834ab37e06c5dd170eb0e1"
  admin:
    username: "{cipher}1b1605dd29d70df25c643ed64a28779456c1453c2252432b3a77e77ae35935d0"
    password: "{cipher}9691f299e5d13785d56be58db20a811fbea1b1b8469c6d0b7dfb2040be6eac09"

eureka:
  client:
    service-url:
      defaultZone: http://eureka-server:8761/eureka

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      access: unrestricted
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

logging:
  level:
    com.phumlanidev.notificationservice: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.amqp: DEBUG
    org.springframework.cloud.stream: DEBUG
    org.springframework.http.converter.json: DEBUG
    org.springframework.validation: DEBUG