server:
  port: 9700

spring:
  application:
    name: inventory-service
  config:
    active:
      on-profile: dev
  kafka:
    bootstrap-servers: localhost:29092
    consumer:
      group-id: inventory-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: true
    listener:
      concurrency: 3
      ack-mode: manual
  cloud:
    stream:
      default-binder: kafka

      bindings:
        # üîπ Consumer of OrderPlacedEvent
        reserveStock-in-0:
          destination: order.placed
          group: inventory-group

        # üîπ Producer of StockReservedEvent
        stockReserved-out-0:
          destination: stock.reserved

        # üîπ Producer of StockReservationFailedEvent
        stockReservationFailed-out-0:
          destination: stock.failed

        # üîπ Consumer of ProductCreatedEvent
        productCreated-in-0:
          destination: product.created
          group: inventory-product-group
#
#      kafka:
#        binder:
#          brokers: localhost:29092
#
#        bindings:
#          reserveStock-in-0:
#            consumer:
#              autoCommitOffset: true
#              autoBindDlq: true
#              configuration:
#                spring.json.trusted.packages: '*'
#
#          productCreated-in-0:
#            consumer:
#              autoCommitOffset: true
#              autoBindDlq: true
#              configuration:
#                spring.json.trusted.packages: '*'
#
#          # üîπ Outbound bindings should use producer
#          stockReserved-out-0:
#            producer:
#              configuration:
#                spring.json.trusted.packages: '*'
#
#          stockReservationFailed-out-0:
#            producer:
#              configuration:
#                spring.json.trusted.packages: '*'
#  config:
#    activate:
#      on-profile: dev
#  kafka:
#    bootstrap-servers: localhost:29092
#    consumer:
#      group-id: ${spring.application.name}
#      auto-offset-reset: earliest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#      properties:
#        spring.json.trusted.packages: '*'
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#  cloud:
#    stream:
#      default-binder: kafka
#      kafka:
#        binder:
#          brokers: localhost:29092
#      bindings:
#        # ‚úÖ Consumer of order placed
#        reserveStock-in-0:
#          destination: order.placed
#          group: inventory-group
#
#        # ‚úÖ Stock reservation success response
#        stockReserved-out-0:
#          destination: stock.reserved
#
#        # ‚ùå Stock reservation failure response
#        stockReservationFailed-out-0:
#          destination: stock.failed
#
#        productCreated-in-0:
#          destination: product.created
#          group: inventory-product-group
  datasource:
    url: jdbc:postgresql://localhost:5432/inventorydb
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5       # Keep low to avoid exhausting local DB connections
      minimum-idle: 2            # Few idle connections are enough
      idle-timeout: 30000        # 30 sec before closing idle connections
      max-lifetime: 1800000      # 30 minutes
      connection-timeout: 10000  # 10 seconds max wait for a connection
      pool-name: DevHikariCP
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/ecommerce
          jwk-uri: http://localhost:8080/realms/ecommerce/protocol/openid-connect/certs
  rabbitmq:
    host: localhost
    port: 5672
    username: "{cipher}21ef876d345fc0f126fb77707df98e739755474e6d39a35bf01f3b9af2f15b7f"
    password: "{cipher}3a2d49f7665bd9715e6c718a5b3b48057049f0695f52bf4e32c18c33189c06ef"

keycloak:
  auth-server-url: http://localhost:8080
  realm: ecommerce
  resource: invetory-service
  principle-attribute: preferred_username
  credentials:
    secret: "{cipher}20ca560d46c74c510c3942acc53cfc34edcc1254a9ddf34435be9a4431965812e10ea9fbf8cae310cced69db5818925ebbaf462a61583a14e23c09639286744e"
  admin:
    username: "{cipher}1b1605dd29d70df25c643ed64a28779456c1453c2252432b3a77e77ae35935d0"
    password: "{cipher}9691f299e5d13785d56be58db20a811fbea1b1b8469c6d0b7dfb2040be6eac09"

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      access: unrestricted
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

logging:
  level:
    com.phumlanidev.orderservice: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.boot.context.config: DEBUG
    org.springframework.amqp: DEBUG
    org.springframework.cloud.stream: DEBUG
    org.springframework.kafka: DEBUG
    org.apache.kafka: DEBUG
    org.springframework.http.converter.json: DEBUG
    org.springframework.validation: DEBUG