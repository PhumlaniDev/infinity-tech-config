server:
  port: 9400

spring:
  application:
    name: product-service
  config:
    activate:
      on-profile: dev
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: true
    template:
      default-topic: product-created-topic
#  kafka:
#    bootstrap-servers: localhost:29092
#    consumer:
#      group-id: ${spring.application.name}
#      auto-offset-reset: earliest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#      properties:
#        spring.json.trusted.packages: '*'
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#  cloud:
#    stream:
#      default-binder: kafka
#      kafka:
#        binder:
#          brokers: localhost:29092
#      bindings:
#        productCreated-out-0:
#          destination: product.created
#          content-type: application/json
  cache:
    type: redis
  datasource:
    url: jdbc:postgresql://localhost:5432/productdb
    username: "{cipher}2dbb4f8fb118abdff5534ba5bc8c8ed8cc1435a333a2958811a3f9713215d1ee"
    password: "{cipher}2dbb4f8fb118abdff5534ba5bc8c8ed8cc1435a333a2958811a3f9713215d1ee"
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5       # Keep low to avoid exhausting local DB connections
      minimum-idle: 2            # Few idle connections are enough
      idle-timeout: 30000        # 30 sec before closing idle connections
      max-lifetime: 1800000      # 30 minutes
      connection-timeout: 10000  # 10 seconds max wait for a connection
      pool-name: DevHikariCP
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  redis:
    host: localhost
    port: 6379
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/ecommerce
          jwk-uri: http://localhost:8080/realms/ecommerce/protocol/openid-connect/certs
  rabbitmq:
    host: localhost
    port: 5672
    username: "{cipher}21ef876d345fc0f126fb77707df98e739755474e6d39a35bf01f3b9af2f15b7f"
    password: "{cipher}3a2d49f7665bd9715e6c718a5b3b48057049f0695f52bf4e32c18c33189c06ef"

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka

keycloak:
  auth-server-url: http://localhost:8080
  realm: ecommerce
  resource: product-service
  principle-attribute: preferred_username
  credentials:
    secret: "{cipher}3e37d4304a498a364ea49b377d0e4bf6e0c04a0df67e9e33f6144b2556b32414f1a9d52a9fc5a78853a623e0445f7ab809b3786149975c7836f6f88333f20607"
  admin:
    username: "{cipher}1b1605dd29d70df25c643ed64a28779456c1453c2252432b3a77e77ae35935d0"
    password: "{cipher}9691f299e5d13785d56be58db20a811fbea1b1b8469c6d0b7dfb2040be6eac09"

logging:
  level:
    com.phumlanidev.productservice: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.http.converter.json: DEBUG
    org.springframework.validation: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      access: unrestricted
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}