server:
  port: 9300

spring:
  application:
    name: order-service
  config:
    activate:
      on-profile: docker
  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: ${spring.application.name}
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.phumlanidev.commonevents.events"
        spring.json.use.type.headers: false
      enable-auto-commit: false
      max-poll-records: 10
      heartbeat-interval: 1000
      session-timeout: 15000
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: true
    listener:
      concurrency: 3
      ack-mode: manual
    retry:
      topic:
        enabled: true
  cloud:
    stream:
      default-binder: kafka
      kafka:
        binder:
          brokers: kafka:9092
      bindings:
        orderPlaced-out-0:
          destination: order.placed

        reserveStock-in-0:
          destination: stock.reserved
          group: order-group

        stockReservationFailed-in-0:
          destination: stock.failed
          group: order-group
#  cloud:
#    stream:
#      defaultBinder: rabbit
#      bindings:
#        # 1️⃣ Outbound to RabbitMQ
#        orderPlaced-out-0:
#          destination: order.placed.queue
#          content-type: application/json
#
#        # 2️⃣ Inbound from inventory-service (success)
#        handleStockReserved-in-0:
#          destination: stock.reserved
#          group: order-service
#
#        # 3️⃣ Inbound from inventory-service (failure)
#        handleStockReservationFailed-in-0:
#          destination: stock.failed
#          group: order-service
#
#        # 4️⃣ Outbound to payment-service
#        paymentRequest-out-0:
#          destination: payment.request
#          content-type: application/json
#
#        # 5️⃣ Outbound to notification-service (optional fallback)
#        orderFailedNotification-out-0:
#          destination: order.failed.notification
#          content-type: application/json
#
#      rabbit:
#        bindings:
#          orderPlaced-out-0:
#            producer:
#              exchange-type: fanout
#
#          handleStockReserved-in-0:
#            listener:
#              autoBindDlq: true
#              requeueRejected: false
#
#          handleStockReservationFailed-in-0:
#            listener:
#              autoBindDlq: true
#              requeueRejected: false
#
#          paymentRequest-out-0:
#            producer:
#              exchange-type: fanout
#
#          orderFailedNotification-out-0:
#            producer:
#              exchange-type: fanout
  datasource:
    url: jdbc:postgresql://postgres-order:5432/orderdb
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5       # Keep low to avoid exhausting local DB connections
      minimum-idle: 2            # Few idle connections are enough
      idle-timeout: 30000        # 30 sec before closing idle connections
      max-lifetime: 1800000      # 30 minutes
      connection-timeout: 10000  # 10 seconds max wait for a connection
      pool-name: DevHikariCP
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  redis:
    host: redis
    port: 6379
  cache:
    type: redis
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://keycloak:8080/realms/ecommerce
          jwk-uri: http://keycloak:8080/realms/ecommerce/protocol/openid-connect/certs
  rabbitmq:
    host: rabbitmq
    port: 5672
    username: "{cipher}21ef876d345fc0f126fb77707df98e739755474e6d39a35bf01f3b9af2f15b7f"
    password: "{cipher}3a2d49f7665bd9715e6c718a5b3b48057049f0695f52bf4e32c18c33189c06ef"

keycloak:
  auth-server-url: http://keycloak:8080
  realm: ecommerce
  resource: order-service
  principle-attribute: preferred_username
  credentials:
    secret: "{cipher}1591796e6c5430b69c64f1d4809d92be06712373739e4069c4abe1affe61f2ee6c2b2c177261d2198fc85f91e8a940fa9285a84dc503d6658f6dbc299d8a336a"
  admin:
    username: "{cipher}1b1605dd29d70df25c643ed64a28779456c1453c2252432b3a77e77ae35935d0"
    password: "{cipher}9691f299e5d13785d56be58db20a811fbea1b1b8469c6d0b7dfb2040be6eac09"

stripe:
  webhook-secret: "{cipher}31c41e3bbe21203330b4b33f3153feefc0a92186d82ebb223c1e481bc482a971320f5b5ac2d612c35a045054b4740f5dfd12b99a9acbac57b17f1c502e9a1cefd9e2a6357f3dd75b7fd186256ebab1f402c357e051bd993b3376fc73081d7ac0"

resilience4j:
  circuitbreaker:
    instances:
      notificationService:
        registerHealthIndicator: true
        slidingWindowSize: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 3

  bulkhead:
    instances:
      notificationService:
        maxConcurrentCalls: 10
        maxWaitDuration: 0

  retry:
    instances:
      notificationService:
        maxAttempts: 3
        waitDuration: 2s

  ratelimiter:
    instances:
      notificationService:
        limitForPeriod: 10
        limitRefreshPeriod: 1s
        timeoutDuration: 0

  timelimiter:
    instances:
      notificationService:
        timeoutDuration: 3s

eureka:
  client:
    service-url:
      defaultZone: http://eureka-server:8761/eureka

management:
  endpoints:
    web:
      exposure:
        include: health, info, prometheus
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

logging:
  level:
    # Set your application's log level
    com.phumlanidev.orderservice: DEBUG

    # Reduce Hibernate verbosity
    org.hibernate.SQL: INFO
    org.hibernate.type.descriptor.sql.BasicBinder: INFO

    # Reduce Spring Boot and AMQP noise
    org.springframework.boot.context.config: INFO
    org.springframework.amqp: INFO
    org.springframework.cloud.stream: INFO
    org.springframework.kafka: WARN
    org.apache.kafka: WARN
    org.springframework.http.converter.json: INFO
    org.springframework.validation: INFO